export const YMapClustererReactifyOverride = (YMapClustererI, { reactify, React }) => {
    const YMapClustererReactified = reactify.entity(YMapClustererI);
    const YMapClusterer = React.forwardRef((props, ref) => {
        const [clusters, setClusters] = React.useState([]);
        const onRender = React.useCallback((clusters) => {
            const reactClusters = {};
            clusters.forEach(({ lnglat, features, clusterId }) => {
                reactClusters[clusterId] = (React.createElement(React.Fragment, { key: clusterId }, features.length === 1
                    ? props.marker(features[0])
                    : props.cluster(lnglat, features)));
            });
            setClusters(Object.values(reactClusters));
            return false;
        }, [props]);
        return (React.createElement(React.Fragment, null,
            React.createElement(YMapClustererReactified, { ...props, ref: ref, onRender: onRender }),
            clusters));
    });
    return YMapClusterer;
};
